// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package testdata is a generated GoMock package.
package testdata

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entities "github.com/parta4ok/kvs/question/internal/entities"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// CompleteSession mocks base method.
func (m *MockService) CompleteSession(ctx context.Context, sessionID string, answers []*entities.UserAnswer) (*entities.SessionResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompleteSession", ctx, sessionID, answers)
	ret0, _ := ret[0].(*entities.SessionResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CompleteSession indicates an expected call of CompleteSession.
func (mr *MockServiceMockRecorder) CompleteSession(ctx, sessionID, answers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteSession", reflect.TypeOf((*MockService)(nil).CompleteSession), ctx, sessionID, answers)
}

// CreateSession mocks base method.
func (m *MockService) CreateSession(ctx context.Context, userID string, topics []string) (string, map[string]entities.Question, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", ctx, userID, topics)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(map[string]entities.Question)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockServiceMockRecorder) CreateSession(ctx, userID, topics interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockService)(nil).CreateSession), ctx, userID, topics)
}

// ShowTopics mocks base method.
func (m *MockService) ShowTopics(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShowTopics", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShowTopics indicates an expected call of ShowTopics.
func (mr *MockServiceMockRecorder) ShowTopics(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShowTopics", reflect.TypeOf((*MockService)(nil).ShowTopics), ctx)
}
