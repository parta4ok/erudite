// Code generated by MockGen. DO NOT EDIT.
// Source: session.go
//
// Generated by this command:
//
//	mockgen -source=session.go -destination=./testdata/session.go -package=testdata
//

// Package testdata is a generated GoMock package.
package testdata

import (
	reflect "reflect"

	entities "github.com/parta4ok/kvs/knowledge_checker/internal/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockSessionState is a mock of SessionState interface.
type MockSessionState struct {
	ctrl     *gomock.Controller
	recorder *MockSessionStateMockRecorder
	isgomock struct{}
}

// MockSessionStateMockRecorder is the mock recorder for MockSessionState.
type MockSessionStateMockRecorder struct {
	mock *MockSessionState
}

// NewMockSessionState creates a new mock instance.
func NewMockSessionState(ctrl *gomock.Controller) *MockSessionState {
	mock := &MockSessionState{ctrl: ctrl}
	mock.recorder = &MockSessionStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionState) EXPECT() *MockSessionStateMockRecorder {
	return m.recorder
}

// GetSessionResult mocks base method.
func (m *MockSessionState) GetSessionResult(session *entities.Session) (*entities.SessionResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSessionResult", session)
	ret0, _ := ret[0].(*entities.SessionResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSessionResult indicates an expected call of GetSessionResult.
func (mr *MockSessionStateMockRecorder) GetSessionResult(session any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessionResult", reflect.TypeOf((*MockSessionState)(nil).GetSessionResult), session)
}

// GetStatus mocks base method.
func (m *MockSessionState) GetStatus() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatus")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetStatus indicates an expected call of GetStatus.
func (mr *MockSessionStateMockRecorder) GetStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatus", reflect.TypeOf((*MockSessionState)(nil).GetStatus))
}

// SetQuestions mocks base method.
func (m *MockSessionState) SetQuestions(session *entities.Session, qestions map[uint64]entities.Question) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetQuestions", session, qestions)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetQuestions indicates an expected call of SetQuestions.
func (mr *MockSessionStateMockRecorder) SetQuestions(session, qestions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetQuestions", reflect.TypeOf((*MockSessionState)(nil).SetQuestions), session, qestions)
}

// SetSessionID mocks base method.
func (m *MockSessionState) SetSessionID(session *entities.Session, sessionID uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSessionID", session, sessionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetSessionID indicates an expected call of SetSessionID.
func (mr *MockSessionStateMockRecorder) SetSessionID(session, sessionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSessionID", reflect.TypeOf((*MockSessionState)(nil).SetSessionID), session, sessionID)
}

// SetUserAnswer mocks base method.
func (m *MockSessionState) SetUserAnswer(session *entities.Session, answers []entities.UserAnswer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUserAnswer", session, answers)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUserAnswer indicates an expected call of SetUserAnswer.
func (mr *MockSessionStateMockRecorder) SetUserAnswer(session, answers any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUserAnswer", reflect.TypeOf((*MockSessionState)(nil).SetUserAnswer), session, answers)
}
