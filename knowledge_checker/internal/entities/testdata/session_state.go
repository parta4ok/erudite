// Code generated by MockGen. DO NOT EDIT.
// Source: session_state.go
//
// Generated by this command:
//
//	mockgen -source=session_state.go -destination=./testdata/session_state.go -package=testdata
//

// Package testdata is a generated GoMock package.
package testdata

import (
	reflect "reflect"
	time "time"

	entities "github.com/parta4ok/kvs/knowledge_checker/internal/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockSessionState is a mock of SessionState interface.
type MockSessionState struct {
	ctrl     *gomock.Controller
	recorder *MockSessionStateMockRecorder
	isgomock struct{}
}

// MockSessionStateMockRecorder is the mock recorder for MockSessionState.
type MockSessionStateMockRecorder struct {
	mock *MockSessionState
}

// NewMockSessionState creates a new mock instance.
func NewMockSessionState(ctrl *gomock.Controller) *MockSessionState {
	mock := &MockSessionState{ctrl: ctrl}
	mock.recorder = &MockSessionStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionState) EXPECT() *MockSessionStateMockRecorder {
	return m.recorder
}

// GetSessionResult mocks base method.
func (m *MockSessionState) GetSessionResult() (*entities.SessionResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSessionResult")
	ret0, _ := ret[0].(*entities.SessionResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSessionResult indicates an expected call of GetSessionResult.
func (mr *MockSessionStateMockRecorder) GetSessionResult() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessionResult", reflect.TypeOf((*MockSessionState)(nil).GetSessionResult))
}

// GetStatus mocks base method.
func (m *MockSessionState) GetStatus() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatus")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetStatus indicates an expected call of GetStatus.
func (mr *MockSessionStateMockRecorder) GetStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatus", reflect.TypeOf((*MockSessionState)(nil).GetStatus))
}

// SetQuestions mocks base method.
func (m *MockSessionState) SetQuestions(qestions map[uint64]entities.Question, duration time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetQuestions", qestions, duration)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetQuestions indicates an expected call of SetQuestions.
func (mr *MockSessionStateMockRecorder) SetQuestions(qestions, duration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetQuestions", reflect.TypeOf((*MockSessionState)(nil).SetQuestions), qestions, duration)
}

// SetUserAnswer mocks base method.
func (m *MockSessionState) SetUserAnswer(answers []*entities.UserAnswer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUserAnswer", answers)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUserAnswer indicates an expected call of SetUserAnswer.
func (mr *MockSessionStateMockRecorder) SetUserAnswer(answers any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUserAnswer", reflect.TypeOf((*MockSessionState)(nil).SetUserAnswer), answers)
}

// MockStateHolder is a mock of StateHolder interface.
type MockStateHolder struct {
	ctrl     *gomock.Controller
	recorder *MockStateHolderMockRecorder
	isgomock struct{}
}

// MockStateHolderMockRecorder is the mock recorder for MockStateHolder.
type MockStateHolderMockRecorder struct {
	mock *MockStateHolder
}

// NewMockStateHolder creates a new mock instance.
func NewMockStateHolder(ctrl *gomock.Controller) *MockStateHolder {
	mock := &MockStateHolder{ctrl: ctrl}
	mock.recorder = &MockStateHolderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStateHolder) EXPECT() *MockStateHolderMockRecorder {
	return m.recorder
}

// ChangeState mocks base method.
func (m *MockStateHolder) ChangeState(state entities.SessionState) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ChangeState", state)
}

// ChangeState indicates an expected call of ChangeState.
func (mr *MockStateHolderMockRecorder) ChangeState(state any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeState", reflect.TypeOf((*MockStateHolder)(nil).ChangeState), state)
}
