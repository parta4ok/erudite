// Code generated by MockGen. DO NOT EDIT.
// Source: introspector.go

// Package testdata is a generated GoMock package.
package testdata

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entities "github.com/parta4ok/kvs/question/internal/entities"
)

// MockIntrospector is a mock of Introspector interface.
type MockIntrospector struct {
	ctrl     *gomock.Controller
	recorder *MockIntrospectorMockRecorder
}

// MockIntrospectorMockRecorder is the mock recorder for MockIntrospector.
type MockIntrospectorMockRecorder struct {
	mock *MockIntrospector
}

// NewMockIntrospector creates a new mock instance.
func NewMockIntrospector(ctrl *gomock.Controller) *MockIntrospector {
	mock := &MockIntrospector{ctrl: ctrl}
	mock.recorder = &MockIntrospectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIntrospector) EXPECT() *MockIntrospectorMockRecorder {
	return m.recorder
}

// Introspect mocks base method.
func (m *MockIntrospector) Introspect(ctx context.Context, jwt string) (*entities.Claims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Introspect", ctx, jwt)
	ret0, _ := ret[0].(*entities.Claims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Introspect indicates an expected call of Introspect.
func (mr *MockIntrospectorMockRecorder) Introspect(ctx, jwt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Introspect", reflect.TypeOf((*MockIntrospector)(nil).Introspect), ctx, jwt)
}
