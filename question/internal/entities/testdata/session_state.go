// Code generated by MockGen. DO NOT EDIT.
// Source: session_state.go

// Package testdata is a generated GoMock package.
package testdata

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	entities "github.com/parta4ok/kvs/question/internal/entities"
)

// MockSessionState is a mock of SessionState interface.
type MockSessionState struct {
	ctrl     *gomock.Controller
	recorder *MockSessionStateMockRecorder
}

// MockSessionStateMockRecorder is the mock recorder for MockSessionState.
type MockSessionStateMockRecorder struct {
	mock *MockSessionState
}

// NewMockSessionState creates a new mock instance.
func NewMockSessionState(ctrl *gomock.Controller) *MockSessionState {
	mock := &MockSessionState{ctrl: ctrl}
	mock.recorder = &MockSessionStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionState) EXPECT() *MockSessionStateMockRecorder {
	return m.recorder
}

// GetQuestions mocks base method.
func (m *MockSessionState) GetQuestions() ([]entities.Question, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuestions")
	ret0, _ := ret[0].([]entities.Question)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuestions indicates an expected call of GetQuestions.
func (mr *MockSessionStateMockRecorder) GetQuestions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuestions", reflect.TypeOf((*MockSessionState)(nil).GetQuestions))
}

// GetSessionDurationLimit mocks base method.
func (m *MockSessionState) GetSessionDurationLimit() (time.Duration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSessionDurationLimit")
	ret0, _ := ret[0].(time.Duration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSessionDurationLimit indicates an expected call of GetSessionDurationLimit.
func (mr *MockSessionStateMockRecorder) GetSessionDurationLimit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessionDurationLimit", reflect.TypeOf((*MockSessionState)(nil).GetSessionDurationLimit))
}

// GetSessionResult mocks base method.
func (m *MockSessionState) GetSessionResult() (*entities.SessionResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSessionResult")
	ret0, _ := ret[0].(*entities.SessionResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSessionResult indicates an expected call of GetSessionResult.
func (mr *MockSessionStateMockRecorder) GetSessionResult() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessionResult", reflect.TypeOf((*MockSessionState)(nil).GetSessionResult))
}

// GetStartedAt mocks base method.
func (m *MockSessionState) GetStartedAt() (time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStartedAt")
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStartedAt indicates an expected call of GetStartedAt.
func (mr *MockSessionStateMockRecorder) GetStartedAt() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStartedAt", reflect.TypeOf((*MockSessionState)(nil).GetStartedAt))
}

// GetStatus mocks base method.
func (m *MockSessionState) GetStatus() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatus")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetStatus indicates an expected call of GetStatus.
func (mr *MockSessionStateMockRecorder) GetStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatus", reflect.TypeOf((*MockSessionState)(nil).GetStatus))
}

// GetUserAnswers mocks base method.
func (m *MockSessionState) GetUserAnswers() ([]*entities.UserAnswer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserAnswers")
	ret0, _ := ret[0].([]*entities.UserAnswer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserAnswers indicates an expected call of GetUserAnswers.
func (mr *MockSessionStateMockRecorder) GetUserAnswers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserAnswers", reflect.TypeOf((*MockSessionState)(nil).GetUserAnswers))
}

// IsDailySessionLimitReached mocks base method.
func (m *MockSessionState) IsDailySessionLimitReached(ctx context.Context, userID uint64, topics []string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsDailySessionLimitReached", ctx, userID, topics)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsDailySessionLimitReached indicates an expected call of IsDailySessionLimitReached.
func (mr *MockSessionStateMockRecorder) IsDailySessionLimitReached(ctx, userID, topics interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDailySessionLimitReached", reflect.TypeOf((*MockSessionState)(nil).IsDailySessionLimitReached), ctx, userID, topics)
}

// IsExpired mocks base method.
func (m *MockSessionState) IsExpired() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsExpired")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsExpired indicates an expected call of IsExpired.
func (mr *MockSessionStateMockRecorder) IsExpired() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsExpired", reflect.TypeOf((*MockSessionState)(nil).IsExpired))
}

// SetQuestions mocks base method.
func (m *MockSessionState) SetQuestions(qestions map[uint64]entities.Question, duration time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetQuestions", qestions, duration)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetQuestions indicates an expected call of SetQuestions.
func (mr *MockSessionStateMockRecorder) SetQuestions(qestions, duration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetQuestions", reflect.TypeOf((*MockSessionState)(nil).SetQuestions), qestions, duration)
}

// SetUserAnswer mocks base method.
func (m *MockSessionState) SetUserAnswer(answers []*entities.UserAnswer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUserAnswer", answers)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUserAnswer indicates an expected call of SetUserAnswer.
func (mr *MockSessionStateMockRecorder) SetUserAnswer(answers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUserAnswer", reflect.TypeOf((*MockSessionState)(nil).SetUserAnswer), answers)
}

// MockStateHolder is a mock of StateHolder interface.
type MockStateHolder struct {
	ctrl     *gomock.Controller
	recorder *MockStateHolderMockRecorder
}

// MockStateHolderMockRecorder is the mock recorder for MockStateHolder.
type MockStateHolderMockRecorder struct {
	mock *MockStateHolder
}

// NewMockStateHolder creates a new mock instance.
func NewMockStateHolder(ctrl *gomock.Controller) *MockStateHolder {
	mock := &MockStateHolder{ctrl: ctrl}
	mock.recorder = &MockStateHolderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStateHolder) EXPECT() *MockStateHolderMockRecorder {
	return m.recorder
}

// ChangeState mocks base method.
func (m *MockStateHolder) ChangeState(state entities.SessionState) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ChangeState", state)
}

// ChangeState indicates an expected call of ChangeState.
func (mr *MockStateHolderMockRecorder) ChangeState(state interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeState", reflect.TypeOf((*MockStateHolder)(nil).ChangeState), state)
}
