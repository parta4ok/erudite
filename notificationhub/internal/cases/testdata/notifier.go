// Code generated by MockGen. DO NOT EDIT.
// Source: notifier.go

// Package testdata is a generated GoMock package.
package testdata

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	cases "github.com/parta4ok/kvs/notificationhub/internal/cases"
	entities "github.com/parta4ok/kvs/notificationhub/internal/entities"
)

// MockNotifier is a mock of Notifier interface.
type MockNotifier struct {
	ctrl     *gomock.Controller
	recorder *MockNotifierMockRecorder
}

// MockNotifierMockRecorder is the mock recorder for MockNotifier.
type MockNotifierMockRecorder struct {
	mock *MockNotifier
}

// NewMockNotifier creates a new mock instance.
func NewMockNotifier(ctrl *gomock.Controller) *MockNotifier {
	mock := &MockNotifier{ctrl: ctrl}
	mock.recorder = &MockNotifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotifier) EXPECT() *MockNotifierMockRecorder {
	return m.recorder
}

// Next mocks base method.
func (m *MockNotifier) Next() cases.Notifier {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(cases.Notifier)
	return ret0
}

// Next indicates an expected call of Next.
func (mr *MockNotifierMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockNotifier)(nil).Next))
}

// Notify mocks base method.
func (m *MockNotifier) Notify(sessionResult *entities.SessionResult, recipient *entities.Recipient) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Notify", sessionResult, recipient)
	ret0, _ := ret[0].(error)
	return ret0
}

// Notify indicates an expected call of Notify.
func (mr *MockNotifierMockRecorder) Notify(sessionResult, recipient interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Notify", reflect.TypeOf((*MockNotifier)(nil).Notify), sessionResult, recipient)
}

// SetNextNotifier mocks base method.
func (m *MockNotifier) SetNextNotifier(notifier cases.Notifier) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetNextNotifier", notifier)
}

// SetNextNotifier indicates an expected call of SetNextNotifier.
func (mr *MockNotifierMockRecorder) SetNextNotifier(notifier interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNextNotifier", reflect.TypeOf((*MockNotifier)(nil).SetNextNotifier), notifier)
}
