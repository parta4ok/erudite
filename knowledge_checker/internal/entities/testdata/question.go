// Code generated by MockGen. DO NOT EDIT.
// Source: question.go

// Package testdata is a generated GoMock package.
package testdata

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entities "github.com/parta4ok/kvs/knowledge_checker/internal/entities"
)

// MockQuestion is a mock of Question interface.
type MockQuestion struct {
	ctrl     *gomock.Controller
	recorder *MockQuestionMockRecorder
}

// MockQuestionMockRecorder is the mock recorder for MockQuestion.
type MockQuestionMockRecorder struct {
	mock *MockQuestion
}

// NewMockQuestion creates a new mock instance.
func NewMockQuestion(ctrl *gomock.Controller) *MockQuestion {
	mock := &MockQuestion{ctrl: ctrl}
	mock.recorder = &MockQuestionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuestion) EXPECT() *MockQuestionMockRecorder {
	return m.recorder
}

// ID mocks base method.
func (m *MockQuestion) ID() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockQuestionMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockQuestion)(nil).ID))
}

// IsAnswerCorrect mocks base method.
func (m *MockQuestion) IsAnswerCorrect(ans *entities.UserAnswer) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAnswerCorrect", ans)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsAnswerCorrect indicates an expected call of IsAnswerCorrect.
func (mr *MockQuestionMockRecorder) IsAnswerCorrect(ans interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAnswerCorrect", reflect.TypeOf((*MockQuestion)(nil).IsAnswerCorrect), ans)
}

// Subject mocks base method.
func (m *MockQuestion) Subject() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subject")
	ret0, _ := ret[0].(string)
	return ret0
}

// Subject indicates an expected call of Subject.
func (mr *MockQuestionMockRecorder) Subject() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subject", reflect.TypeOf((*MockQuestion)(nil).Subject))
}

// Topic mocks base method.
func (m *MockQuestion) Topic() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Topic")
	ret0, _ := ret[0].(string)
	return ret0
}

// Topic indicates an expected call of Topic.
func (mr *MockQuestionMockRecorder) Topic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Topic", reflect.TypeOf((*MockQuestion)(nil).Topic))
}

// Type mocks base method.
func (m *MockQuestion) Type() entities.QuestionType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(entities.QuestionType)
	return ret0
}

// Type indicates an expected call of Type.
func (mr *MockQuestionMockRecorder) Type() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockQuestion)(nil).Type))
}

// Variants mocks base method.
func (m *MockQuestion) Variants() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Variants")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Variants indicates an expected call of Variants.
func (mr *MockQuestionMockRecorder) Variants() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Variants", reflect.TypeOf((*MockQuestion)(nil).Variants))
}
