// Code generated by MockGen. DO NOT EDIT.
// Source: question.go
//
// Generated by this command:
//
//	mockgen -source=question.go -destination=./testdata/question.go -package=testdata
//

// Package testdata is a generated GoMock package.
package testdata

import (
	reflect "reflect"

	entities "github.com/parta4ok/kvs/knowledge_checker/internal/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockQuestion is a mock of Question interface.
type MockQuestion struct {
	ctrl     *gomock.Controller
	recorder *MockQuestionMockRecorder
	isgomock struct{}
}

// MockQuestionMockRecorder is the mock recorder for MockQuestion.
type MockQuestionMockRecorder struct {
	mock *MockQuestion
}

// NewMockQuestion creates a new mock instance.
func NewMockQuestion(ctrl *gomock.Controller) *MockQuestion {
	mock := &MockQuestion{ctrl: ctrl}
	mock.recorder = &MockQuestionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuestion) EXPECT() *MockQuestionMockRecorder {
	return m.recorder
}

// CorrectAnswer mocks base method.
func (m *MockQuestion) CorrectAnswer() map[string]struct{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CorrectAnswer")
	ret0, _ := ret[0].(map[string]struct{})
	return ret0
}

// CorrectAnswer indicates an expected call of CorrectAnswer.
func (mr *MockQuestionMockRecorder) CorrectAnswer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CorrectAnswer", reflect.TypeOf((*MockQuestion)(nil).CorrectAnswer))
}

// ID mocks base method.
func (m *MockQuestion) ID() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockQuestionMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockQuestion)(nil).ID))
}

// Payload mocks base method.
func (m *MockQuestion) Payload() any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Payload")
	ret0, _ := ret[0].(any)
	return ret0
}

// Payload indicates an expected call of Payload.
func (mr *MockQuestionMockRecorder) Payload() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Payload", reflect.TypeOf((*MockQuestion)(nil).Payload))
}

// Topic mocks base method.
func (m *MockQuestion) Topic() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Topic")
	ret0, _ := ret[0].(string)
	return ret0
}

// Topic indicates an expected call of Topic.
func (mr *MockQuestionMockRecorder) Topic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Topic", reflect.TypeOf((*MockQuestion)(nil).Topic))
}

// Type mocks base method.
func (m *MockQuestion) Type() entities.QuestionType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(entities.QuestionType)
	return ret0
}

// Type indicates an expected call of Type.
func (mr *MockQuestionMockRecorder) Type() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockQuestion)(nil).Type))
}
