// Code generated by MockGen. DO NOT EDIT.
// Source: storage.go
//
// Generated by this command:
//
//	mockgen -source=storage.go -destination=./testdata/storage.go -package=testdata
//

// Package testdata is a generated GoMock package.
package testdata

import (
	context "context"
	reflect "reflect"

	entities "github.com/parta4ok/kvs/knowledge_checker/internal/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
	isgomock struct{}
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// GetQuesions mocks base method.
func (m *MockStorage) GetQuesions(ctx context.Context, topics []string) ([]entities.Question, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuesions", ctx, topics)
	ret0, _ := ret[0].([]entities.Question)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuesions indicates an expected call of GetQuesions.
func (mr *MockStorageMockRecorder) GetQuesions(ctx, topics any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuesions", reflect.TypeOf((*MockStorage)(nil).GetQuesions), ctx, topics)
}

// GetSessionBySessionID mocks base method.
func (m *MockStorage) GetSessionBySessionID(ctx context.Context, sessionID uint64) (*entities.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSessionBySessionID", ctx, sessionID)
	ret0, _ := ret[0].(*entities.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSessionBySessionID indicates an expected call of GetSessionBySessionID.
func (mr *MockStorageMockRecorder) GetSessionBySessionID(ctx, sessionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessionBySessionID", reflect.TypeOf((*MockStorage)(nil).GetSessionBySessionID), ctx, sessionID)
}

// GetTopics mocks base method.
func (m *MockStorage) GetTopics(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopics", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTopics indicates an expected call of GetTopics.
func (mr *MockStorageMockRecorder) GetTopics(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopics", reflect.TypeOf((*MockStorage)(nil).GetTopics), ctx)
}

// StoreSession mocks base method.
func (m *MockStorage) StoreSession(ctx context.Context, session *entities.Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreSession", ctx, session)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreSession indicates an expected call of StoreSession.
func (mr *MockStorageMockRecorder) StoreSession(ctx, session any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreSession", reflect.TypeOf((*MockStorage)(nil).StoreSession), ctx, session)
}
